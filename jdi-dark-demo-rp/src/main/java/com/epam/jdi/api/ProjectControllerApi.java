/*
 * Report Portal
 * Report Portal API documentation
 *
 * OpenAPI spec version: 5.2.0
 * Contact: Support EPMC-TST Report Portal <SupportEPMC-TSTReportPortal@epam.com>
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.epam.jdi.api;

import com.epam.http.annotations.ContentType;
import com.epam.http.annotations.DELETE;
import com.epam.http.annotations.GET;
import com.epam.http.annotations.POST;
import com.epam.http.annotations.PUT;
import com.epam.http.annotations.QueryParameter;
import com.epam.http.annotations.ServiceDomain;
import com.epam.http.requests.RestDataMethod;
import com.epam.http.requests.RestMethod;
import com.epam.jdi.model.DeleteBulkRS;
import com.epam.jdi.model.EntryCreatedRS;
import com.epam.jdi.model.IterableProjectInfoResource;
import com.epam.jdi.model.IterableUserResource;
import com.epam.jdi.model.IterableString;
import com.epam.jdi.model.OperationCompletionRS;
import com.epam.jdi.model.PreferenceResource;
import com.epam.jdi.model.ProjectInfoResource;
import com.epam.jdi.model.ProjectResource;

import java.util.Map;

import static io.restassured.http.ContentType.JSON;

@ServiceDomain("${api}")
public class ProjectControllerApi {

    /**
     * addUserPreference
     *
     * @param filterId /path/ filterId (required)
     * @param login /path/ login (required)
     * @param projectName /path/ projectName (required)
     * @return OperationCompletionRS
     */
    @ContentType(JSON)
    @PUT("/v1/project/{projectName}/preference/{login}/{filterId}")
    public static RestDataMethod<OperationCompletionRS> addUserPreferenceUsingPUTJSON;

    /**
     * Assign users
     *
     * @param projectName /path/ projectName (required)
     * @param assignUsersRQ(AssignUsersRQ) /body/ assignUsersRQ (required)
     * @return OperationCompletionRS
     */
    @ContentType(JSON)
    @PUT("/v1/project/{projectName}/assign")
    public static RestDataMethod<OperationCompletionRS> assignProjectUsersUsingPUTJSON;

    /**
     * Create new project
     *
     * @param createProjectRQ(CreateProjectRQ) /body/ createProjectRQ (required)
     * @return EntryCreatedRS
     */
    @ContentType(JSON)
    @POST("/v1/project")
    public static RestDataMethod<EntryCreatedRS> createProjectUsingPOST;

    /**
     * Delete project index from ML
     *
     * @param projectName /path/ projectName (required)
     * @param name /query/  (optional)
     * @return OperationCompletionRS
     */
    @QueryParameter(name = "name", value = "name_example")
    @DELETE("/v1/project/{projectName}/index")
    public static RestDataMethod<OperationCompletionRS> deleteProjectIndexUsingDELETE;

    /**
     * Delete project
     * Could be deleted only by users with administrator role
     *
     * @param projectId /path/ projectId (required)
     * @return OperationCompletionRS
     */
    @DELETE("/v1/project/{projectId}")
    public static RestDataMethod<OperationCompletionRS> deleteProjectUsingDELETE;

    /**
     * Delete multiple projects
     * Could be deleted only by users with administrator role
     *
     * @param deleteBulkRQ(DeleteBulkRQ) /body/ deleteBulkRQ (required)
     * @return DeleteBulkRS
     */
    @DELETE("/v1/project")
    public static RestDataMethod<DeleteBulkRS> deleteProjectUsingDELETE1;

    /**
     * Exports information about all projects
     * Allowable only for users with administrator role
     *
     * @param filterEqCreationDate /query/ Filters by 'creationDate' (optional)
     * @param filterEqId /query/ Filters by 'id' (optional)
     * @param filterEqLastRun /query/ Filters by 'lastRun' (optional)
     * @param filterEqLaunchesQuantity /query/ Filters by 'launchesQuantity' (optional)
     * @param filterEqName /query/ Filters by 'name' (optional)
     * @param filterEqOrganization /query/ Filters by 'organization' (optional)
     * @param filterEqType /query/ Filters by 'type' (optional)
     * @param filterEqUsersQuantity /query/ Filters by 'usersQuantity' (optional)
     * @param view /query/ view (optional, default to csv)
     */
    @QueryParameter(name = "filterEqCreationDate", value = "new Date()")
    @QueryParameter(name = "filterEqId", value = "789")
    @QueryParameter(name = "filterEqLastRun", value = "new Date()")
    @QueryParameter(name = "filterEqLaunchesQuantity", value = "789")
    @QueryParameter(name = "filterEqName", value = "filterEqName_example")
    @QueryParameter(name = "filterEqOrganization", value = "filterEqOrganization_example")
    @QueryParameter(name = "filterEqType", value = "filterEqType_example")
    @QueryParameter(name = "filterEqUsersQuantity", value = "789")
    @QueryParameter(name = "view", value = "csv")
    @GET("/v1/project/export")
    public static RestMethod exportProjectsUsingGET;

    /**
     * getAllProjectNames
     *
     * @return Iterablestring
     */
    @GET("/v1/project/names")
    public static RestDataMethod<IterableString> getAllProjectNamesUsingGET;

    /**
     * getAllProjectsInfo
     *
     * @param filterEqCreationDate /query/ Filters by 'creationDate' (optional)
     * @param filterEqId /query/ Filters by 'id' (optional)
     * @param filterEqLastRun /query/ Filters by 'lastRun' (optional)
     * @param filterEqLaunchesQuantity /query/ Filters by 'launchesQuantity' (optional)
     * @param filterEqName /query/ Filters by 'name' (optional)
     * @param filterEqOrganization /query/ Filters by 'organization' (optional)
     * @param filterEqType /query/ Filters by 'type' (optional)
     * @param filterEqUsersQuantity /query/ Filters by 'usersQuantity' (optional)
     * @param pagePage /query/ Results page you want to retrieve (0..N) (optional)
     * @param pageSize /query/ Number of records per page (optional)
     * @param pageSort /query/ Sorting criteria in the format: property, (asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return IterableProjectInfoResource
     */
    @QueryParameter(name = "filterEqCreationDate", value = "new Date()")
    @QueryParameter(name = "filterEqId", value = "789")
    @QueryParameter(name = "filterEqLastRun", value = "new Date()")
    @QueryParameter(name = "filterEqLaunchesQuantity", value = "789")
    @QueryParameter(name = "filterEqName", value = "filterEqName_example")
    @QueryParameter(name = "filterEqOrganization", value = "filterEqOrganization_example")
    @QueryParameter(name = "filterEqType", value = "filterEqType_example")
    @QueryParameter(name = "filterEqUsersQuantity", value = "789")
    @QueryParameter(name = "pagePage", value = "56")
    @QueryParameter(name = "pageSize", value = "56")
    @QueryParameter(name = "pageSort", value = "pageSort_example")
    @GET("/v1/project/list")
    public static RestDataMethod<IterableProjectInfoResource> getAllProjectsInfoUsingGET;

    /**
     * getAnalyzerIndexingStatus
     *
     * @return Map<String, Boolean>
     */
    @GET("/v1/project/analyzer/status")
    public static RestDataMethod<Map<String, Boolean>> getAnalyzerIndexingStatusUsingGET;

    /**
     * getProjectInfo
     *
     * @param projectName /path/ projectName (required)
     * @param interval /query/ interval (optional, default to 3M)
     * @return ProjectInfoResource
     */
    @QueryParameter(name = "interval", value = "3M")
    @GET("/v1/project/list/{projectName}")
    public static RestDataMethod<ProjectInfoResource> getProjectInfoUsingGET;

    /**
     * Load project users by filter
     * Only for users that are members of the project
     *
     * @param projectName /path/ projectName (required)
     * @param filterCntUsers /query/ filter.cnt.users (required)
     * @return String[]
     */
    @QueryParameter(name = "filterCntUsers", value = "filterCntUsers_example")
    @GET("/v1/project/{projectName}/usernames")
    public static RestDataMethod<String[]> getProjectUsersUsingGET;

    /**
     * Get users assigned on current project
     *
     * @param projectName /path/ projectName (required)
     * @param filterEqEmail /query/ Filters by 'email' (optional)
     * @param filterEqExpired /query/ Filters by 'expired' (optional)
     * @param filterEqFullName /query/ Filters by 'fullName' (optional)
     * @param filterEqId /query/ Filters by 'id' (optional)
     * @param filterEqLastLogin /query/ Filters by 'lastLogin' (optional)
     * @param filterEqProject /query/ Filters by 'project' (optional)
     * @param filterEqProjectId /query/ Filters by 'projectId' (optional)
     * @param filterEqRole /query/ Filters by 'role' (optional)
     * @param filterEqSynchronizationDate /query/ Filters by 'synchronizationDate' (optional)
     * @param filterEqType /query/ Filters by 'type' (optional)
     * @param filterEqUser /query/ Filters by 'user' (optional)
     * @param pagePage /query/ Results page you want to retrieve (0..N) (optional)
     * @param pageSize /query/ Number of records per page (optional)
     * @param pageSort /query/ Sorting criteria in the format: property, (asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return IterableUserResource
     */
    @QueryParameter(name = "filterEqEmail", value = "filterEqEmail_example")
    @QueryParameter(name = "filterEqExpired", value = "true")
    @QueryParameter(name = "filterEqFullName", value = "filterEqFullName_example")
    @QueryParameter(name = "filterEqId", value = "789")
    @QueryParameter(name = "filterEqLastLogin", value = "789")
    @QueryParameter(name = "filterEqProject", value = "")
    @QueryParameter(name = "filterEqProjectId", value = "789")
    @QueryParameter(name = "filterEqRole", value = "filterEqRole_example")
    @QueryParameter(name = "filterEqSynchronizationDate", value = "789")
    @QueryParameter(name = "filterEqType", value = "filterEqType_example")
    @QueryParameter(name = "filterEqUser", value = "filterEqUser_example")
    @QueryParameter(name = "pagePage", value = "56")
    @QueryParameter(name = "pageSize", value = "56")
    @QueryParameter(name = "pageSort", value = "pageSort_example")
    @GET("/v1/project/{projectName}/users")
    public static RestDataMethod<IterableUserResource> getProjectUsersUsingGET1;

    /**
     * Get information about project
     * Only for users that are assigned to the project
     *
     * @param projectName /path/ projectName (required)
     * @return ProjectResource
     */
    @GET("/v1/project/{projectName}")
    public static RestDataMethod<ProjectResource> getProjectUsingGET;

    /**
     * getProjectWidget
     *
     * @param projectName /path/ projectName (required)
     * @param widgetCode /path/ widgetCode (required)
     * @param interval /query/ interval (optional, default to 3M)
     * @return Object
     */
    @QueryParameter(name = "interval", value = "3M")
    @GET("/v1/project/{projectName}/widget/{widgetCode}")
    public static RestDataMethod<Object> getProjectWidgetUsingGET;

    /**
     * Load user preferences
     * Only for users that allowed to edit other users
     *
     * @param login /path/ login (required)
     * @param projectName /path/ projectName (required)
     * @return PreferenceResource
     */
    @GET("/v1/project/{projectName}/preference/{login}")
    public static RestDataMethod<PreferenceResource> getUserPreferenceUsingGET;

    /**
     * Load users which can be assigned to specified project
     * Only for users with project manager permissions
     *
     * @param projectName /path/ projectName (required)
     * @param filterEqEmail /query/ Filters by 'email' (optional)
     * @param filterEqExpired /query/ Filters by 'expired' (optional)
     * @param filterEqFullName /query/ Filters by 'fullName' (optional)
     * @param filterEqId /query/ Filters by 'id' (optional)
     * @param filterEqLastLogin /query/ Filters by 'lastLogin' (optional)
     * @param filterEqProject /query/ Filters by 'project' (optional)
     * @param filterEqProjectId /query/ Filters by 'projectId' (optional)
     * @param filterEqRole /query/ Filters by 'role' (optional)
     * @param filterEqSynchronizationDate /query/ Filters by 'synchronizationDate' (optional)
     * @param filterEqType /query/ Filters by 'type' (optional)
     * @param filterEqUser /query/ Filters by 'user' (optional)
     * @param pagePage /query/ Results page you want to retrieve (0..N) (optional)
     * @param pageSize /query/ Number of records per page (optional)
     * @param pageSort /query/ Sorting criteria in the format: property, (asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return IterableUserResource
     */
    @QueryParameter(name = "filterEqEmail", value = "filterEqEmail_example")
    @QueryParameter(name = "filterEqExpired", value = "true")
    @QueryParameter(name = "filterEqFullName", value = "filterEqFullName_example")
    @QueryParameter(name = "filterEqId", value = "789")
    @QueryParameter(name = "filterEqLastLogin", value = "789")
    @QueryParameter(name = "filterEqProject", value = "")
    @QueryParameter(name = "filterEqProjectId", value = "789")
    @QueryParameter(name = "filterEqRole", value = "filterEqRole_example")
    @QueryParameter(name = "filterEqSynchronizationDate", value = "789")
    @QueryParameter(name = "filterEqType", value = "filterEqType_example")
    @QueryParameter(name = "filterEqUser", value = "filterEqUser_example")
    @QueryParameter(name = "pagePage", value = "56")
    @QueryParameter(name = "pageSize", value = "56")
    @QueryParameter(name = "pageSort", value = "pageSort_example")
    @GET("/v1/project/{projectName}/assignable")
    public static RestDataMethod<IterableUserResource> getUsersForAssignUsingGET;

    /**
     * Starts reindex all project data in ML
     *
     * @param projectName /path/ projectName (required)
     * @return OperationCompletionRS
     */
    @ContentType(JSON)
    @PUT("/v1/project/{projectName}/index")
    public static RestDataMethod<OperationCompletionRS> indexProjectDataUsingPUTJSON;

    /**
     * removeUserPreference
     *
     * @param filterId /path/ filterId (required)
     * @param login /path/ login (required)
     * @param projectName /path/ projectName (required)
     * @return OperationCompletionRS
     */
    @DELETE("/v1/project/{projectName}/preference/{login}/{filterId}")
    public static RestDataMethod<OperationCompletionRS> removeUserPreferenceUsingDELETE;

    /**
     * searchForUser
     *
     * @param projectName /path/ projectName (required)
     * @param pagePage /query/ Results page you want to retrieve (0..N) (optional)
     * @param pageSize /query/ Number of records per page (optional)
     * @param pageSort /query/ Sorting criteria in the format: property, (asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param term /query/ term (required)
     * @return IterableUserResource
     */
    @QueryParameter(name = "pagePage", value = "56")
    @QueryParameter(name = "pageSize", value = "56")
    @QueryParameter(name = "pageSort", value = "pageSort_example")
    @QueryParameter(name = "term", value = "term_example")
    @GET("/v1/project/{projectName}/usernames/search")
    public static RestDataMethod<IterableUserResource> searchForUserUsingGET;

    /**
     * searchProjectNames
     *
     * @param term /query/ term (required)
     * @return Iterablestring
     */
    @QueryParameter(name = "term", value = "term_example")
    @GET("/v1/project/names/search")
    public static RestDataMethod<IterableString> searchProjectNamesUsingGET;

    /**
     * Un assign users
     *
     * @param projectName /path/ projectName (required)
     * @param unassignUsersRQ(UnassignUsersRQ) /body/ unassignUsersRQ (required)
     * @return OperationCompletionRS
     */
    @ContentType(JSON)
    @PUT("/v1/project/{projectName}/unassign")
    public static RestDataMethod<OperationCompletionRS> unassignProjectUsersUsingPUTJSON;

    /**
     * Update project notifications configuration
     *
     * @param projectName /path/ projectName (required)
     * @param updateProjectNotificationConfigRQ(ProjectNotificationConfigDTO) /body/ updateProjectNotificationConfigRQ (required)
     * @return OperationCompletionRS
     */
    @ContentType(JSON)
    @PUT("/v1/project/{projectName}/notification")
    public static RestDataMethod<OperationCompletionRS> updateProjectNotificationConfigUsingPUTJSON;

    /**
     * Update project
     *
     * @param projectName /path/ projectName (required)
     * @param updateProjectRQ(UpdateProjectRQ) /body/ updateProjectRQ (required)
     * @return OperationCompletionRS
     */
    @ContentType(JSON)
    @PUT("/v1/project/{projectName}")
    public static RestDataMethod<OperationCompletionRS> updateProjectUsingPUTJSON;
}
