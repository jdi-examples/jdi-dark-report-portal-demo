/*
 * Report Portal
 * Report Portal API documentation
 *
 * OpenAPI spec version: 5.2.0
 * Contact: Support EPMC-TST Report Portal <SupportEPMC-TSTReportPortal@epam.com>
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.epam.jdi.api;

import com.epam.http.annotations.ContentType;
import com.epam.http.annotations.GET;
import com.epam.http.annotations.POST;
import com.epam.http.annotations.PUT;
import com.epam.http.annotations.QueryParameter;
import com.epam.http.annotations.ServiceDomain;
import com.epam.http.requests.RestDataMethod;
import com.epam.jdi.model.EntryCreatedRS;
import com.epam.jdi.model.IterableWidgetResource;
import com.epam.jdi.model.IterableObject;
import com.epam.jdi.model.OperationCompletionRS;
import com.epam.jdi.model.WidgetResource;

import static io.restassured.http.ContentType.JSON;

@ServiceDomain("${api}")
public class WidgetControllerApi {

    /**
     * Create a new widget
     *
     * @param projectName /path/ projectName (required)
     * @param createWidget(WidgetRQ) /body/ createWidget (required)
     * @return EntryCreatedRS
     */
    @ContentType(JSON)
    @POST("/v1/{projectName}/widget")
    public static RestDataMethod<EntryCreatedRS> createWidgetUsingPOST;

    /**
     * Load shared widgets
     *
     * @param projectName /path/ projectName (required)
     * @param filterEqDescription /query/ Filters by 'description' (optional)
     * @param filterEqId /query/ Filters by 'id' (optional)
     * @param filterEqName /query/ Filters by 'name' (optional)
     * @param filterEqOwner /query/ Filters by 'owner' (optional)
     * @param filterEqProjectId /query/ Filters by 'projectId' (optional)
     * @param filterEqShared /query/ Filters by 'shared' (optional)
     * @param pagePage /query/ Results page you want to retrieve (0..N) (optional)
     * @param pageSize /query/ Number of records per page (optional)
     * @param pageSort /query/ Sorting criteria in the format: property, (asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return IterableWidgetResource
     */
    @QueryParameter(name = "filterEqDescription", value = "filterEqDescription_example")
    @QueryParameter(name = "filterEqId", value = "789")
    @QueryParameter(name = "filterEqName", value = "filterEqName_example")
    @QueryParameter(name = "filterEqOwner", value = "filterEqOwner_example")
    @QueryParameter(name = "filterEqProjectId", value = "789")
    @QueryParameter(name = "filterEqShared", value = "true")
    @QueryParameter(name = "pagePage", value = "56")
    @QueryParameter(name = "pageSize", value = "56")
    @QueryParameter(name = "pageSort", value = "pageSort_example")
    @GET("/v1/{projectName}/widget/shared")
    public static RestDataMethod<IterableWidgetResource> getSharedUsingGET;

    /**
     * Load all widget names which belong to a user
     *
     * @param projectName /path/ projectName (required)
     * @param filterEqDescription /query/ Filters by 'description' (optional)
     * @param filterEqId /query/ Filters by 'id' (optional)
     * @param filterEqName /query/ Filters by 'name' (optional)
     * @param filterEqOwner /query/ Filters by 'owner' (optional)
     * @param filterEqProjectId /query/ Filters by 'projectId' (optional)
     * @param filterEqShared /query/ Filters by 'shared' (optional)
     * @param pagePage /query/ Results page you want to retrieve (0..N) (optional)
     * @param pageSize /query/ Number of records per page (optional)
     * @param pageSort /query/ Sorting criteria in the format: property, (asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return Iterableobject
     */
    @QueryParameter(name = "filterEqDescription", value = "filterEqDescription_example")
    @QueryParameter(name = "filterEqId", value = "789")
    @QueryParameter(name = "filterEqName", value = "filterEqName_example")
    @QueryParameter(name = "filterEqOwner", value = "filterEqOwner_example")
    @QueryParameter(name = "filterEqProjectId", value = "789")
    @QueryParameter(name = "filterEqShared", value = "true")
    @QueryParameter(name = "pagePage", value = "56")
    @QueryParameter(name = "pageSize", value = "56")
    @QueryParameter(name = "pageSort", value = "pageSort_example")
    @GET("/v1/{projectName}/widget/names/all")
    public static RestDataMethod<IterableObject> getWidgetNamesUsingGET;

    /**
     * Get widget preview
     *
     * @param projectName /path/ projectName (required)
     * @param previewRQ(WidgetPreviewRQ) /body/ previewRQ (required)
     * @return Object
     */
    @ContentType(JSON)
    @POST("/v1/{projectName}/widget/preview")
    public static RestDataMethod<Object> getWidgetPreviewUsingPOST;

    /**
     * Get multilevel widget by ID
     *
     * @param projectName /path/ projectName (required)
     * @param widgetId /path/ widgetId (required)
     * @param attributes /query/ attributes (optional)
     * @param params /query/ params (required)
     * @return WidgetResource
     */
    @QueryParameter(name = "attributes", value = "attributes_example")
    @QueryParameter(name = "params", value = "")
    @GET("/v1/{projectName}/widget/multilevel/{widgetId}")
    public static RestDataMethod<WidgetResource> getWidgetUsingGET;

    /**
     * Get widget by ID
     *
     * @param projectName /path/ projectName (required)
     * @param widgetId /path/ widgetId (required)
     * @return WidgetResource
     */
    @GET("/v1/{projectName}/widget/{widgetId}")
    public static RestDataMethod<WidgetResource> getWidgetUsingGET1;

    /**
     * Search shared widgets by name
     *
     * @param projectName /path/ projectName (required)
     * @param filterEqDescription /query/ Filters by 'description' (optional)
     * @param filterEqId /query/ Filters by 'id' (optional)
     * @param filterEqName /query/ Filters by 'name' (optional)
     * @param filterEqOwner /query/ Filters by 'owner' (optional)
     * @param filterEqProjectId /query/ Filters by 'projectId' (optional)
     * @param filterEqShared /query/ Filters by 'shared' (optional)
     * @param pagePage /query/ Results page you want to retrieve (0..N) (optional)
     * @param pageSize /query/ Number of records per page (optional)
     * @param pageSort /query/ Sorting criteria in the format: property, (asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param term /query/ term (required)
     * @return IterableWidgetResource
     */
    @QueryParameter(name = "filterEqDescription", value = "filterEqDescription_example")
    @QueryParameter(name = "filterEqId", value = "789")
    @QueryParameter(name = "filterEqName", value = "filterEqName_example")
    @QueryParameter(name = "filterEqOwner", value = "filterEqOwner_example")
    @QueryParameter(name = "filterEqProjectId", value = "789")
    @QueryParameter(name = "filterEqShared", value = "true")
    @QueryParameter(name = "pagePage", value = "56")
    @QueryParameter(name = "pageSize", value = "56")
    @QueryParameter(name = "pageSort", value = "pageSort_example")
    @QueryParameter(name = "term", value = "term_example")
    @GET("/v1/{projectName}/widget/shared/search")
    public static RestDataMethod<IterableWidgetResource> searchSharedUsingGET;

    /**
     * Update specified widget
     *
     * @param projectName /path/ projectName (required)
     * @param widgetId /path/ widgetId (required)
     * @param updateRQ(WidgetRQ) /body/ updateRQ (required)
     * @return OperationCompletionRS
     */
    @ContentType(JSON)
    @PUT("/v1/{projectName}/widget/{widgetId}")
    public static RestDataMethod<OperationCompletionRS> updateWidgetUsingPUTJSON;
}
