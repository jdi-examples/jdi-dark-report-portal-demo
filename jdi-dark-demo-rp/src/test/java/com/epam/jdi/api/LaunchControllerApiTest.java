/*
 * Report Portal
 * Report Portal API documentation
 *
 * OpenAPI spec version: 5.2.0
 * Contact: Support EPMC-TST Report Portal <SupportEPMC-TSTReportPortal@epam.com>
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.epam.jdi.api;

import com.epam.http.response.RestResponse;
import com.epam.jdi.InitTests;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Ignore;
import org.testng.annotations.Test;

import static com.epam.http.requests.ServiceInit.init;

/**
 * API tests for LaunchControllerApi
 */
public class LaunchControllerApiTest extends InitTests {

    @BeforeClass
    public void before() {
        init(LaunchControllerApi.class, spec);
    }


    /**
     * Force finish launch
     */
    @Ignore
    @Test
    public void bulkForceFinishUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.bulkForceFinishUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * Bulk update attributes and description
     */
    @Ignore
    @Test
    public void bulkUpdateUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.bulkUpdateUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * Compare launches
     */
    @Ignore
    @Test
    public void compareLaunchesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.compareLaunchesUsingGET.call();
        resp.isOk();
    }

    /**
     * Delete specified launch by ID
     */
    @Ignore
    @Test
    public void deleteLaunchUsingDELETETest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.deleteLaunchUsingDELETE.call();
        resp.isOk();
    }

    /**
     * Delete specified launches by ids
     */
    @Ignore
    @Test
    public void deleteLaunchesUsingDELETETest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.deleteLaunchesUsingDELETE.call();
        resp.isOk();
    }

    /**
     * Finish launch for specified project
     */
    @Ignore
    @Test
    public void finishLaunchUsingPUT1JSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.finishLaunchUsingPUT1JSON.call();
        resp.isOk();
    }

    /**
     * Force finish launch for specified project
     */
    @Ignore
    @Test
    public void forceFinishLaunchUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.forceFinishLaunchUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * Get launch names of project
     */
    @Ignore
    @Test
    public void getAllLaunchNamesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getAllLaunchNamesUsingGET.call();
        resp.isOk();
    }

    /**
     * Get all unique owners of project launches
     */
    @Ignore
    @Test
    public void getAllOwnersUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getAllOwnersUsingGET.call();
        resp.isOk();
    }

    /**
     * Get all unique attribute keys of project launches
     */
    @Ignore
    @Test
    public void getAttributeKeysUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getAttributeKeysUsingGET.call();
        resp.isOk();
    }

    /**
     * Get all unique attribute values of project launches
     */
    @Ignore
    @Test
    public void getAttributeValuesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getAttributeValuesUsingGET.call();
        resp.isOk();
    }

    /**
     * Get launches of specified project from DEBUG mode
     */
    @Ignore
    @Test
    public void getDebugLaunchesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getDebugLaunchesUsingGET.call();
        resp.isOk();
    }

    /**
     * Get list of latest project launches by filter
     */
    @Ignore
    @Test
    public void getLatestLaunchesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getLatestLaunchesUsingGET.call();
        resp.isOk();
    }

    /**
     * Get specified launch by UUID
     */
    @Ignore
    @Test
    public void getLaunchByUuidUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getLaunchByUuidUsingGET.call();
        resp.isOk();
    }

    /**
     * Export specified launch
     * Only following formats are supported: pdf (by default), xls, html.
     */
    @Ignore
    @Test
    public void getLaunchReportUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getLaunchReportUsingGET.call();
        resp.isOk();
    }

    /**
     * Get specified launch by ID
     */
    @Ignore
    @Test
    public void getLaunchUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getLaunchUsingGET.call();
        resp.isOk();
    }

    /**
     * Get list of project launches by filter
     */
    @Ignore
    @Test
    public void getProjectLaunchesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getProjectLaunchesUsingGET.call();
        resp.isOk();
    }

    /**
     * getStatuses
     */
    @Ignore
    @Test
    public void getStatusesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.getStatusesUsingGET.call();
        resp.isOk();
    }

    /**
     * Import junit xml report
     * Only following formats are supported: zip.
     */
    @Ignore
    @Test
    public void importLaunchUsingPOSTANYTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.importLaunchUsingPOSTANY.call();
        resp.isOk();
    }

    /**
     * Merge set of specified launches in common one
     */
    @Ignore
    @Test
    public void mergeLaunchesUsingPOST1JSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.mergeLaunchesUsingPOST1JSON.call();
        resp.isOk();
    }

    /**
     * Start launch auto-analyzer on demand
     */
    @Ignore
    @Test
    public void startLaunchAnalyzerUsingPOSTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.startLaunchAnalyzerUsingPOSTJSON.call();
        resp.isOk();
    }

    /**
     * Starts launch for specified project
     */
    @Ignore
    @Test
    public void startLaunchUsingPOST1JSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.startLaunch.call();
        resp.isOk();
    }

    /**
     * Updates launch for specified project
     */
    @Ignore
    @Test
    public void updateLaunchUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.updateLaunchUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * Updates launches for specified project
     */
    @Ignore
    @Test
    public void updateLaunchesUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = LaunchControllerApi.updateLaunchesUsingPUTJSON.call();
        resp.isOk();
    }

}
