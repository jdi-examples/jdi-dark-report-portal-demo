/*
 * Report Portal
 * Report Portal API documentation
 *
 * OpenAPI spec version: 5.2.0
 * Contact: Support EPMC-TST Report Portal <SupportEPMC-TSTReportPortal@epam.com>
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.epam.jdi.api;

import com.epam.http.response.RestResponse;
import com.epam.jdi.InitTests;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Ignore;
import org.testng.annotations.Test;

import static com.epam.http.requests.ServiceInit.init;

/**
 * API tests for ProjectControllerApi
 */
public class ProjectControllerApiTest extends InitTests {

    @BeforeClass
    public void before() {
        init(ProjectControllerApi.class, spec);
    }


    /**
     * addUserPreference
     */
    @Ignore
    @Test
    public void addUserPreferenceUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.addUserPreferenceUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * Assign users
     */
    @Ignore
    @Test
    public void assignProjectUsersUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.assignProjectUsersUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * Create new project
     */
    @Ignore
    @Test
    public void createProjectUsingPOSTTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.createProjectUsingPOST.call();
        resp.isOk();
    }

    /**
     * Delete project index from ML
     */
    @Ignore
    @Test
    public void deleteProjectIndexUsingDELETETest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.deleteProjectIndexUsingDELETE.call();
        resp.isOk();
    }

    /**
     * Delete project
     * Could be deleted only by users with administrator role
     */
    @Ignore
    @Test
    public void deleteProjectUsingDELETETest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.deleteProjectUsingDELETE.call();
        resp.isOk();
    }

    /**
     * Delete multiple projects
     * Could be deleted only by users with administrator role
     */
    @Ignore
    @Test
    public void deleteProjectUsingDELETE1Test() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.deleteProjectUsingDELETE1.call();
        resp.isOk();
    }

    /**
     * Exports information about all projects
     * Allowable only for users with administrator role
     */
    @Ignore
    @Test
    public void exportProjectsUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.exportProjectsUsingGET.call();
        resp.isOk();
    }

    /**
     * getAllProjectNames
     */
    @Ignore
    @Test
    public void getAllProjectNamesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getAllProjectNamesUsingGET.call();
        resp.isOk();
    }

    /**
     * getAllProjectsInfo
     */
    @Ignore
    @Test
    public void getAllProjectsInfoUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getAllProjectsInfoUsingGET.call();
        resp.isOk();
    }

    /**
     * getAnalyzerIndexingStatus
     */
    @Ignore
    @Test
    public void getAnalyzerIndexingStatusUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getAnalyzerIndexingStatusUsingGET.call();
        resp.isOk();
    }

    /**
     * getProjectInfo
     */
    @Ignore
    @Test
    public void getProjectInfoUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getProjectInfoUsingGET.call();
        resp.isOk();
    }

    /**
     * Load project users by filter
     * Only for users that are members of the project
     */
    @Ignore
    @Test
    public void getProjectUsersUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getProjectUsersUsingGET.call();
        resp.isOk();
    }

    /**
     * Get users assigned on current project
     */
    @Ignore
    @Test
    public void getProjectUsersUsingGET1Test() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getProjectUsersUsingGET1.call();
        resp.isOk();
    }

    /**
     * Get information about project
     * Only for users that are assigned to the project
     */
    @Ignore
    @Test
    public void getProjectUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getProjectUsingGET.call();
        resp.isOk();
    }

    /**
     * getProjectWidget
     */
    @Ignore
    @Test
    public void getProjectWidgetUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getProjectWidgetUsingGET.call();
        resp.isOk();
    }

    /**
     * Load user preferences
     * Only for users that allowed to edit other users
     */
    @Ignore
    @Test
    public void getUserPreferenceUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getUserPreferenceUsingGET.call();
        resp.isOk();
    }

    /**
     * Load users which can be assigned to specified project
     * Only for users with project manager permissions
     */
    @Ignore
    @Test
    public void getUsersForAssignUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.getUsersForAssignUsingGET.call();
        resp.isOk();
    }

    /**
     * Starts reindex all project data in ML
     */
    @Ignore
    @Test
    public void indexProjectDataUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.indexProjectDataUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * removeUserPreference
     */
    @Ignore
    @Test
    public void removeUserPreferenceUsingDELETETest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.removeUserPreferenceUsingDELETE.call();
        resp.isOk();
    }

    /**
     * searchForUser
     */
    @Ignore
    @Test
    public void searchForUserUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.searchForUserUsingGET.call();
        resp.isOk();
    }

    /**
     * searchProjectNames
     */
    @Ignore
    @Test
    public void searchProjectNamesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.searchProjectNamesUsingGET.call();
        resp.isOk();
    }

    /**
     * Un assign users
     */
    @Ignore
    @Test
    public void unassignProjectUsersUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.unassignProjectUsersUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * Update project notifications configuration
     */
    @Ignore
    @Test
    public void updateProjectNotificationConfigUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.updateProjectNotificationConfigUsingPUTJSON.call();
        resp.isOk();
    }

    /**
     * Update project
     */
    @Ignore
    @Test
    public void updateProjectUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = ProjectControllerApi.updateProjectUsingPUTJSON.call();
        resp.isOk();
    }

}
