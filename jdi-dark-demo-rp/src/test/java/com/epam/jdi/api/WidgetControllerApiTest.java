/*
 * Report Portal
 * Report Portal API documentation
 *
 * OpenAPI spec version: 5.2.0
 * Contact: Support EPMC-TST Report Portal <SupportEPMC-TSTReportPortal@epam.com>
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.epam.jdi.api;

import com.epam.http.response.RestResponse;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static com.epam.http.requests.ServiceInit.init;

/**
 * API tests for WidgetControllerApi
 */
public class WidgetControllerApiTest {

    @BeforeClass
    public void before() {
        init(WidgetControllerApi.class);
    }


    /**
     * Create a new widget
     */
    @Test
    public void createWidgetUsingPOSTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = WidgetControllerApi.createWidgetUsingPOSTJSON.call();
        resp.isOk();
    }

    /**
     * Load shared widgets
     */
    @Test
    public void getSharedUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = WidgetControllerApi.getSharedUsingGET.call();
        resp.isOk();
    }

    /**
     * Load all widget names which belong to a user
     */
    @Test
    public void getWidgetNamesUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = WidgetControllerApi.getWidgetNamesUsingGET.call();
        resp.isOk();
    }

    /**
     * Get widget preview
     */
    @Test
    public void getWidgetPreviewUsingPOSTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = WidgetControllerApi.getWidgetPreviewUsingPOSTJSON.call();
        resp.isOk();
    }

    /**
     * Get multilevel widget by ID
     */
    @Test
    public void getWidgetUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = WidgetControllerApi.getWidgetUsingGET.call();
        resp.isOk();
    }

    /**
     * Get widget by ID
     */
    @Test
    public void getWidgetUsingGET1Test() {
        // TODO: add call parameters and test validations
        RestResponse resp = WidgetControllerApi.getWidgetUsingGET1.call();
        resp.isOk();
    }

    /**
     * Search shared widgets by name
     */
    @Test
    public void searchSharedUsingGETTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = WidgetControllerApi.searchSharedUsingGET.call();
        resp.isOk();
    }

    /**
     * Update specified widget
     */
    @Test
    public void updateWidgetUsingPUTJSONTest() {
        // TODO: add call parameters and test validations
        RestResponse resp = WidgetControllerApi.updateWidgetUsingPUTJSON.call();
        resp.isOk();
    }

}
